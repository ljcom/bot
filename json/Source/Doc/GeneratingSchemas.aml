<?xml version="1.0" encoding="utf-8"?>
<topic id="GeneratingSchemas" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Json.NET Schema supports automatically generating JSON Schemas for .NET types using the <codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaGenerator</codeEntityReference> object. The generator has a number of options for customizing generated schemas.</para>
    </introduction>

<section>
  <title>Generate JSON Schemas from .NET types</title>
<content>
<para>Schema generation is performed by the <codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaGenerator</codeEntityReference> object. It maps .NET objects, collections, properties, and their attributes to their JSON Schema equivalent. A generated schema will successfully validate serialized JSON for that type.</para>

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\GeneratingSchemas.cs" region="PersonClass" title=".NET type" />

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\GeneratingSchemas.cs" region="BasicGeneration" title="Generate a JSON Schema from a .NET type" />

<para><codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaGenerator</codeEntityReference> has a number of options to customize output. An <codeEntityReference>T:Newtonsoft.Json.Serialization.IContractResolver</codeEntityReference> will customize how the type's properties and collections are reflected.</para>

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\GeneratingSchemas.cs" region="IContractResolver" title="Generate a JSON Schema using an IContractResolver" />

<codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaUndefinedIdHandling</codeEntityReference> is used to control whether types with no ID defined have one infered from their type name.

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\GeneratingSchemas.cs" region="JSchemaUndefinedIdHandling" title="Generate a JSON Schema using JSchemaUndefinedIdHandling" />

</content>
</section>


<section>
  <title>Using Data Annotation attributes</title>
<content>
<para><codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaGenerator</codeEntityReference> will look for .NET Data Annotation attributes.</para>

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\GeneratingSchemas.cs" region="BuildingClass" title=".NET type with Data Annotations" />

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\GeneratingSchemas.cs" region="DataAnnotations" title="Schema generation with Data Annotations" />

<para>The following are the Data Annotation attributes used when generating a schema and their effects:</para>

<table>
  <tableHeader>
    <row>
      <entry><para>Data Annotation</para></entry>
      <entry><para>Effect</para></entry>
    </row>
  </tableHeader>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.RequiredAttribute</codeEntityReference></para></entry>
    <entry><para>Property will be <codeInline>required.</codeInline></para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.MinLengthAttribute</codeEntityReference></para></entry>
    <entry><para><codeInline>minLength</codeInline> of a string or the <codeInline>minItems</codeInline> in an array.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.MaxLengthAttribute</codeEntityReference></para></entry>
    <entry><para><codeInline>maxLength</codeInline> of a string or the <codeInline>maxItems</codeInline> in an array.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute</codeEntityReference></para></entry>
    <entry><para>String <codeInline>pattern</codeInline>.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.RangeAttribute</codeEntityReference></para></entry>
    <entry><para>Number <codeInline>minimum</codeInline> and <codeInline>maximum</codeInline>.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.StringLengthAttribute</codeEntityReference></para></entry>
    <entry><para>String <codeInline>minLength</codeInline> and <codeInline>maxLength</codeInline>.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute</codeEntityReference></para></entry>
    <entry><para><codeEntityReference>T:System.Enum</codeEntityReference> type used to generate <codeInline>enum</codeInline> values.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.DataTypeAttribute</codeEntityReference></para></entry>
    <entry><para>String <codeInline>format</codeInline> depending on the <codeEntityReference>T:System.ComponentModel.DataAnnotations.DataType</codeEntityReference> value. Supports Url, Date, Time, DateTime, EmailAddress, PhoneNumber.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.UrlAttribute</codeEntityReference></para></entry>
    <entry><para>String uri <codeInline>format</codeInline>.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.PhoneAttribute</codeEntityReference></para></entry>
    <entry><para>String phone <codeInline>format</codeInline>.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.EmailAddressAttribute</codeEntityReference></para></entry>
    <entry><para>String email <codeInline>format</codeInline>.</para></entry>
  </row>
</table>

</content>
</section>


<section>
  <title>Control Schema Generation with JSchemaGenerationProvider</title>
<content>

<para><codeEntityReference>T:Newtonsoft.Json.Schema.Generation.JSchemaGenerationProvider</codeEntityReference> lets you completely take over schema generation for a type. An example of where this is useful is changing the schema generation for <codeEntityReference>T:System.Enum</codeEntityReference> types from int enum values to string enum values.</para>

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\GeneratingSchemas.cs" region="JSchemaGenerationProvider" title="Schema generation with JSchemaGenerationProvider" />

<para>Json.NET Schema includes <codeEntityReference>T:Newtonsoft.Json.Schema.Generation.StringEnumGenerationProvider</codeEntityReference>. Additional schema providers can be created by inheriting from <codeEntityReference>T:Newtonsoft.Json.Schema.Generation.JSchemaGenerationProvider</codeEntityReference></para>.

</content>
</section>


    <relatedTopics>
      <codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaGenerator</codeEntityReference>
      <codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaUndefinedIdHandling</codeEntityReference>
      <codeEntityReference>T:Newtonsoft.Json.Schema.Generation.JSchemaGenerationProvider</codeEntityReference>
    </relatedTopics>

  </developerConceptualDocument>
</topic>